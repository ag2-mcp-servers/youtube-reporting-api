# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T03:12:06+00:00

from __future__ import annotations

from enum import Enum
from typing import List, Optional

from pydantic import BaseModel, Field


class Empty(BaseModel):
    pass


class GdataBlobstore2Info(BaseModel):
    blobGeneration: Optional[str] = Field(None, description='gdata')
    blobId: Optional[str] = Field(None, description='gdata')
    downloadReadHandle: Optional[str] = Field(None, description='gdata')
    readToken: Optional[str] = Field(None, description='gdata')
    uploadMetadataContainer: Optional[str] = Field(None, description='gdata')


class ReferenceType(Enum):
    PATH = 'PATH'
    BLOB_REF = 'BLOB_REF'
    INLINE = 'INLINE'
    BIGSTORE_REF = 'BIGSTORE_REF'
    COSMO_BINARY_REFERENCE = 'COSMO_BINARY_REFERENCE'


class GdataContentTypeInfo(BaseModel):
    bestGuess: Optional[str] = Field(None, description='gdata')
    fromBytes: Optional[str] = Field(None, description='gdata')
    fromFileName: Optional[str] = Field(None, description='gdata')
    fromHeader: Optional[str] = Field(None, description='gdata')
    fromUrlPath: Optional[str] = Field(None, description='gdata')


class GdataDiffVersionResponse(BaseModel):
    objectSizeBytes: Optional[str] = Field(None, description='gdata')
    objectVersion: Optional[str] = Field(None, description='gdata')


class GdataDownloadParameters(BaseModel):
    allowGzipCompression: Optional[bool] = Field(None, description='gdata')
    ignoreRange: Optional[bool] = Field(None, description='gdata')


class ReferenceType1(Enum):
    PATH = 'PATH'
    BLOB_REF = 'BLOB_REF'
    INLINE = 'INLINE'
    GET_MEDIA = 'GET_MEDIA'
    COMPOSITE_MEDIA = 'COMPOSITE_MEDIA'
    BIGSTORE_REF = 'BIGSTORE_REF'
    DIFF_VERSION_RESPONSE = 'DIFF_VERSION_RESPONSE'
    DIFF_CHECKSUMS_RESPONSE = 'DIFF_CHECKSUMS_RESPONSE'
    DIFF_DOWNLOAD_RESPONSE = 'DIFF_DOWNLOAD_RESPONSE'
    DIFF_UPLOAD_REQUEST = 'DIFF_UPLOAD_REQUEST'
    DIFF_UPLOAD_RESPONSE = 'DIFF_UPLOAD_RESPONSE'
    COSMO_BINARY_REFERENCE = 'COSMO_BINARY_REFERENCE'
    ARBITRARY_BYTES = 'ARBITRARY_BYTES'


class GdataObjectId(BaseModel):
    bucketName: Optional[str] = Field(None, description='gdata')
    generation: Optional[str] = Field(None, description='gdata')
    objectName: Optional[str] = Field(None, description='gdata')


class Job(BaseModel):
    createTime: Optional[str] = Field(
        None, description='The creation date/time of the job.'
    )
    expireTime: Optional[str] = Field(
        None,
        description='The date/time when this job will expire/expired. After a job expired, no new reports are generated.',
    )
    id: Optional[str] = Field(
        None, description='The server-generated ID of the job (max. 40 characters).'
    )
    name: Optional[str] = Field(
        None, description='The name of the job (max. 100 characters).'
    )
    reportTypeId: Optional[str] = Field(
        None,
        description='The type of reports this job creates. Corresponds to the ID of a ReportType.',
    )
    systemManaged: Optional[bool] = Field(
        None,
        description='True if this a system-managed job that cannot be modified by the user; otherwise false.',
    )


class ListJobsResponse(BaseModel):
    jobs: Optional[List[Job]] = Field(None, description='The list of jobs.')
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve next page of results. Pass this value in the ListJobsRequest.page_token field in the subsequent call to `ListJobs` method to retrieve the next page of results.',
    )


class Report(BaseModel):
    createTime: Optional[str] = Field(
        None, description='The date/time when this report was created.'
    )
    downloadUrl: Optional[str] = Field(
        None,
        description='The URL from which the report can be downloaded (max. 1000 characters).',
    )
    endTime: Optional[str] = Field(
        None,
        description='The end of the time period that the report instance covers. The value is exclusive.',
    )
    id: Optional[str] = Field(
        None, description='The server-generated ID of the report.'
    )
    jobExpireTime: Optional[str] = Field(
        None,
        description='The date/time when the job this report belongs to will expire/expired.',
    )
    jobId: Optional[str] = Field(
        None, description='The ID of the job that created this report.'
    )
    startTime: Optional[str] = Field(
        None,
        description='The start of the time period that the report instance covers. The value is inclusive.',
    )


class ReportType(BaseModel):
    deprecateTime: Optional[str] = Field(
        None, description='The date/time when this report type was/will be deprecated.'
    )
    id: Optional[str] = Field(
        None, description='The ID of the report type (max. 100 characters).'
    )
    name: Optional[str] = Field(
        None, description='The name of the report type (max. 100 characters).'
    )
    systemManaged: Optional[bool] = Field(
        None,
        description='True if this a system-managed report type; otherwise false. Reporting jobs for system-managed report types are created automatically and can thus not be used in the `CreateJob` method.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class GdataCompositeMedia(BaseModel):
    blobRef: Optional[str] = Field(None, description='gdata')
    blobstore2Info: Optional[GdataBlobstore2Info] = Field(None, description='gdata')
    cosmoBinaryReference: Optional[str] = Field(None, description='gdata')
    crc32cHash: Optional[int] = Field(None, description='gdata')
    inline: Optional[str] = Field(None, description='gdata')
    length: Optional[str] = Field(None, description='gdata')
    md5Hash: Optional[str] = Field(None, description='gdata')
    objectId: Optional[GdataObjectId] = Field(None, description='gdata')
    path: Optional[str] = Field(None, description='gdata')
    referenceType: Optional[ReferenceType] = Field(None, description='gdata')
    sha1Hash: Optional[str] = Field(None, description='gdata')


class GdataDiffChecksumsResponse(BaseModel):
    checksumsLocation: Optional[GdataCompositeMedia] = Field(None, description='gdata')
    chunkSizeBytes: Optional[str] = Field(None, description='gdata')
    objectLocation: Optional[GdataCompositeMedia] = Field(None, description='gdata')
    objectSizeBytes: Optional[str] = Field(None, description='gdata')
    objectVersion: Optional[str] = Field(None, description='gdata')


class GdataDiffDownloadResponse(BaseModel):
    objectLocation: Optional[GdataCompositeMedia] = Field(None, description='gdata')


class GdataDiffUploadRequest(BaseModel):
    checksumsInfo: Optional[GdataCompositeMedia] = Field(None, description='gdata')
    objectInfo: Optional[GdataCompositeMedia] = Field(None, description='gdata')
    objectVersion: Optional[str] = Field(None, description='gdata')


class GdataDiffUploadResponse(BaseModel):
    objectVersion: Optional[str] = Field(None, description='gdata')
    originalObject: Optional[GdataCompositeMedia] = Field(None, description='gdata')


class GdataMedia(BaseModel):
    algorithm: Optional[str] = Field(None, description='gdata')
    bigstoreObjectRef: Optional[str] = Field(None, description='gdata')
    blobRef: Optional[str] = Field(None, description='gdata')
    blobstore2Info: Optional[GdataBlobstore2Info] = Field(None, description='gdata')
    compositeMedia: Optional[List[GdataCompositeMedia]] = Field(
        None, description='gdata'
    )
    contentType: Optional[str] = Field(None, description='gdata')
    contentTypeInfo: Optional[GdataContentTypeInfo] = Field(None, description='gdata')
    cosmoBinaryReference: Optional[str] = Field(None, description='gdata')
    crc32cHash: Optional[int] = Field(None, description='gdata')
    diffChecksumsResponse: Optional[GdataDiffChecksumsResponse] = Field(
        None, description='gdata'
    )
    diffDownloadResponse: Optional[GdataDiffDownloadResponse] = Field(
        None, description='gdata'
    )
    diffUploadRequest: Optional[GdataDiffUploadRequest] = Field(
        None, description='gdata'
    )
    diffUploadResponse: Optional[GdataDiffUploadResponse] = Field(
        None, description='gdata'
    )
    diffVersionResponse: Optional[GdataDiffVersionResponse] = Field(
        None, description='gdata'
    )
    downloadParameters: Optional[GdataDownloadParameters] = Field(
        None, description='gdata'
    )
    filename: Optional[str] = Field(None, description='gdata')
    hash: Optional[str] = Field(None, description='gdata')
    hashVerified: Optional[bool] = Field(None, description='gdata')
    inline: Optional[str] = Field(None, description='gdata')
    isPotentialRetry: Optional[bool] = Field(None, description='gdata')
    length: Optional[str] = Field(None, description='gdata')
    md5Hash: Optional[str] = Field(None, description='gdata')
    mediaId: Optional[str] = Field(None, description='gdata')
    objectId: Optional[GdataObjectId] = Field(None, description='gdata')
    path: Optional[str] = Field(None, description='gdata')
    referenceType: Optional[ReferenceType1] = Field(None, description='gdata')
    sha1Hash: Optional[str] = Field(None, description='gdata')
    sha256Hash: Optional[str] = Field(None, description='gdata')
    timestamp: Optional[str] = Field(None, description='gdata')
    token: Optional[str] = Field(None, description='gdata')


class ListReportTypesResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve next page of results. Pass this value in the ListReportTypesRequest.page_token field in the subsequent call to `ListReportTypes` method to retrieve the next page of results.',
    )
    reportTypes: Optional[List[ReportType]] = Field(
        None, description='The list of report types.'
    )


class ListReportsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token to retrieve next page of results. Pass this value in the ListReportsRequest.page_token field in the subsequent call to `ListReports` method to retrieve the next page of results.',
    )
    reports: Optional[List[Report]] = Field(
        None, description='The list of report types.'
    )
